@{
    ViewData["Title"] = "Simple Quiz";
}


<style>
    @@keyframes dropin {
        from {
            top: -100%;
        }

        to {
        }
    }

    @@keyframes noclick {
        from {
            top: -100%;
            left: -100%;
        }

        to {
            top: 0;
            left: 0;
        }
    }

    @@keyframes feedbackAnimIn {
        0% {
            top: -50%;
        }

        20% {
            top: 50%;
        }

        100% {
            top: 50%;
        }
    }

    @@keyframes feedbackAnimOut {
        0% {
            top: 50%;
        }

        80% {
            top: 50%;
        }

        100% {
            top: 100%;
        }
    }

    .hidden {
        display: none;
    }

    .optBtn {
        color: black;
        font-size: 1.5em;
        top: 50%;
        transform: translateY(-50%);
        padding: 3vw;
        font-weight: bold;
        background: transparent;
        border: none;
        max-width: 30%;
        word-wrap: break-word;
        &:hover, &:focus

    {
        text-decoration: underline;
        cursor: pointer;
    }

    }

    html {
        font-family: Garamond, serif;
        font-size: 1.2em;
        margin: 0;
        padding: 0;
        *

    {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        font-family: Garamond, serif;
    }

    body {
        margin: 0;
        padding: 0;
        #quiz

    {
        background: rgb(237, 255, 116);
        background: linear-gradient(90deg, rgb(4, 198, 56) 50%, rgb(40, 54, 251) 50%);
        overflow: hidden;
        width: 80%;
        height: 90%;
        position: absolute;
        top: 0px;
        left: 250px;
        min-width: 150px;
        min-height: 300px;
        padding: 1em;
        box-sizing: border-box;
        #feedback

    {
        width: 100%;
        height: 100%;
        position: absolute;
        top: -100%;
        left: -100%;
        &>span

    {
        background: black;
        color: white;
        font-weight: bold;
        filter: drop-shadow(4px 4px 0 rgba(0, 0, 0, 0.2));
        position: absolute;
        padding: 1em;
        left: 50%;
        transform: translate(-50%, -50%);
        transform-origin: center;
    }

    &.anim {
        animation-duration: 0s;
        animation-fill-mode: forwards;
        animation-name: noclick;
        &>span

    {
        animation-duration: 1s;
        animation-name: feedbackAnimIn;
        animation-fill-mode: forwards;
    }

    }

    &.animout {
        &>span

    {
        animation-duration: 1s;
        animation-name: feedbackAnimOut;
    }

    }
    }

    #start,
    #end,
    #questions {
        padding: 3vw;
        .detail

    {
        background: white;
        padding: 0.2em;
        text-align: center;
    }

    .circle,
    fieldset legend {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.7em;
        font-weight: bold;
        text-align: center;
        background: white;
        width: 25vw;
        height: 25vw;
        min-width: 20%;
        min-height: 20%;
        max-width: 55%;
        max-height: 50%;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1em;
        span

    {
        pointer-events: none;
        left: 0;
        top: 0;
        background: white;
        width: 100%;
        height: 100%;
        position: absolute;
        border-radius: 50%;
        box-sizing: border-box;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1em;
    }

    &:after {
        content: " ";
        -webkit-backdrop-filter: brightness(90%) saturate(200%);
        backdrop-filter: brightness(90%) saturate(200%);
        width: 105%;
        height: 105%;
        border-radius: 50%;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: -1;
    }

    }

    legend {
        z-index: 4;
        cursor: move;
        cursor: grab;
        &.moving

    {
        cursor: grabbing;
    }

    }
    }

    #start,
    #end {
        #startBtn, #retryBtn

    {
        background: black;
        border: 2px solid black;
        color: white;
        border-radius: 0.2em;
        padding: 0.5em 1em;
        font-family: Garamond, serif;
        font-size: 1.2em;
        transition: all 0.3s;
        font-weight: bold;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        bottom: 3vw;
        &:focus, &:hover

    {
        cursor: pointer;
        color: black;
        background: white;
    }

    }
    }

    #questions {
        &.dropin

    {
        fieldset legend

    {
        animation-duration: 0.25s;
        animation-name: dropin;
        animation-fill-mode: forwards;
    }

    }

    &.animCircRight {
        fieldset legend

    {
        left: 150% !important;
        transform: translate(-50%, -50%) rotate(150deg);
        transition: transform 0.9s, left 0.9s;
    }

    }

    &.animCircLeft {
        fieldset legend

    {
        left: -50% !important;
        transform: translate(-50%, -50%) rotate(-150deg);
        transition: transform 1s, left 1s;
    }

    }

    .slide {
        width: 100%;
        height: 100%;
        box-sizing: border-box;
        top: 0;
        left: 0;
        position: absolute;
        fieldset

    {
        border: none;
        button

    {
        color: white;
        font-size: 1.5em;
        top: 50%;
        transform: translateY(-50%);
        padding: 3vw;
        font-weight: bold;
        background: transparent;
        border: none;
        &:hover, &:focus

    {
        text-decoration: underline;
        cursor: pointer;
    }

    &:nth-of-type(1) {
        position: absolute;
        left: 0;
    }

    &:nth-of-type(2) {
        position: absolute;
        right: 0;
    }

    }
    }
    }
    }

    @@media (max-width: 500px) {

        #start,
        #end,
        #questions {
            padding: 3vw;
            .detail

    {
        background: white;
        padding: 0.2em;
        text-align: center;
    }

    .circle,
    fieldset legend {
        top: 0.5em;
        transform: translate(-50%, 0)
    }

    &.animCircRight {
        fieldset legend

    {
        transform: translate(-50%, 0%) rotate(150deg);
    }

    }

    &.animCircLeft {
        fieldset legend

    {
        transform: translate(-50%, 0%) rotate(-150deg);
    }

    }
    }

    #start,
    #end {
        .detail

    {
        position: absolute;
        bottom: 5em;
        width: 80%;
        left: 50%;
        transform: translateX(-50%);
    }

    }

    #questions {
        &.anim

    {
        animation-duration: 0s;
        animation-fill-mode: forwards;
        animation-name: noclick;
    }

    &.animout {
    }

    .slide {
        width: 100%;
        height: 100%;
        box-sizing: border-box;
        top: 0;
        left: 0;
        position: absolute;
        fieldset

    {
        border: none;
        button

    {
        font-size: 1em;
        width: 50%;
        text-align: center;
    }

    }
    }
    }
    }
    }
    }
    }
</style>


<div id="quiz">
</div>


<script>
    const data = {
        questions: [
            {
                text: "La POO(Programmation Orientee  Objet) est",
                options: ["Un paradigme de programmation", "Un langage de programmation"],
                correctAnswer: "Un paradigme de programmation"
            },
            {
                text: "La generalisation permet a des sous-classe de derriver et ainsi de finir des sous-classes plus specifiques.",
                options: ["VRAI", "permet a des sous-classe de derriver et ainsi de finir des sous-classes plus specifiques."],
                correctAnswer: "VRAI"
            },

        ],
        answers: {
            "Un paradigme de programmation": ["La POO(Programmation Orientee  Objet) est"],
            "Un langage de programmation": [],

            "permet a des sous-classe de derriver et ainsi de finir des sous-classes plus specifiques.": [],
            "VRAI": ["La generalisation permet a des sous-classe de derriver et ainsi de finir des sous-classes plus specifiques."],
        }
    };

    const quiz = document.querySelector("#quiz");
    const slides = document.querySelectorAll(".slide");
    const score = {
        correct: 0,
        incorrect: 0,
        total: 0
    }
    function reset() {
        document.querySelector("#start").classList.add("hidden");
        document.querySelector("#end").classList.add("hidden");
        document.querySelector("#questions").innerHTML = quizQuestionSetup();
        document.querySelector("#questions").classList.remove("hidden");
    }

    function updateScore(correctorno) {
        if (correctorno) {
            score.correct++
        } else {
            score.incorrect++
        }
        score.total++;
    }
    function check(opt, q) {
        updateScore(feedback(opt, q));
    }
    function feedback(opt, q) {
        const correctorno = data.answers[opt].includes(q);

        if (correctorno) {
            document.querySelector("#feedback").innerHTML = "<span>Felicitations - vous avez bien repondu !</span>";
        } else {
            document.querySelector("#feedback").innerHTML = "<span>Oh non - cela etait incorrect</span>";
        }

        document.querySelector("#feedback").classList.add("anim");
        return correctorno;
    }

    function nextslide() {
        num = Number(document.querySelector("#questions .slide:not(.hidden)").id.split("slide")[1]);
        const slides = document.querySelectorAll("#questions .slide")
        for (const slide of slides) {
            slide.classList.add("hidden");
        }
        const newSlide = document.querySelector(`#slide${(num + 1)}`)
        if (newSlide) {
            newSlide.classList.remove("hidden");
            newSlide.focus();
        } else {
            quizCompleted();
        }
    }

    function quizCompleted() {
        document.querySelector("#questions").classList.add("hidden")
        document.querySelector("#end").classList.remove("hidden")
        document.querySelector("#end .detail").innerHTML = `You answered ${score.correct} out of ${score.total} questions correctly`
    }
    function setupQuiz() {
        quiz.innerHTML += `<div id="start">
            <div class="detail">Press the “play” button to begin sorting the statement in the circle into the column it belongs to</div>
            <div class="circle"><span>Are you ready?</span></div>
            <button id="startBtn" onclick="reset()">Start</button>
          <div>`
        quizQuestionSetup();
        quiz.innerHTML += `<div id="questions" class="hidden">
          ${quizQuestionSetup()}</div>`

        quiz.innerHTML += ` <div id="end" class="hidden">
          <div class="circle"><span>Well done!</span></div>
          <div class="detail"></div>
            <button id="retryBtn" onclick="reset()">Retry</button>
          <div>`
        quiz.innerHTML += `<div id="feedback" aria-live="polite"><div>`
        document.querySelector("#feedback").addEventListener("animationend", function (e) {
            animEnd(e)
        }, false);
        document.addEventListener("keydown", (e) => {
            if (!document.querySelector("#quiz").classList.contains("hidden") && !document.querySelector("#questions").classList.contains("animCircLeft") && !document.querySelector("#questions").classList.contains("animCircRight")) {
                switch (e.keyCode) {
                    case 37:
                        document.querySelector(".slide:not(.hidden) .optBtn:nth-of-type(1)").click();
                        break;
                    case 39:
                        document.querySelector(".slide:not(.hidden) .optBtn:nth-of-type(2)").click();
                        break;
                    default:
                        return;
                        break;
                }
            }

        });
    }
    function animEnd(e) {
        if (e.animationName === "feedbackAnimIn") {
            if (e.target.parentNode.classList.contains("anim")) {
                e.target.parentNode.classList.add("animout");

            }
        }
        if (e.animationName === "feedbackAnimOut") {
            if (e.target.parentNode.classList.contains("animout")) {
                e.target.parentNode.classList.remove("animout");
                e.target.parentNode.classList.remove("anim");
                nextslide();
                document.querySelector("#questions").classList.remove("animCircRight");
                document.querySelector("#questions").classList.remove("animCircLeft");
                document.querySelector("#questions").classList.add("dropin");
            }
        }
    }

    function quizQuestionSetup() {
        score.correct = 0;
        score.incorrect = 0;
        score.total = 0;
        const sortedQs = shuffle(data.questions);
        questionHtml = "";
        for (const q in sortedQs) {
            const question = sortedQs[q];
            const circleSize = Math.max(100, question.text.length * 10);
            questionHtml += `<div id="slide${q}" tabindex="0" class="slide ${(Number(q) === 0) ? '' : 'hidden'}">
            <fieldset>
              <legend class="lgnd"><span>${question.text}</span></legend>
              <button class="optBtn" onclick="check('${question.options[0]}','${question.text}');document.querySelector('#questions').classList.add('animCircLeft');" data-opt="${question.options[0]}" data-q="${question.text}">${question.options[0]}</button>
              <button class="optBtn" onclick="check('${question.options[1]}','${question.text}');document.querySelector('#questions').classList.add('animCircRight');" data-opt="${question.options[1]}" data-q="${question.text}">${question.options[1]}</button>
            </fieldset>
        </div>`;

        }
        return questionHtml;
    }

    function shuffle(arr) {
        let ci = arr.length, ri;
        while (ci != 0) {
            ri = Math.floor(Math.random() * ci);
            ci--;
            [arr[ci], arr[ri]] = [
                arr[ri], arr[ci]];
        }
        return arr;
    }

    let movingCirc = false;
    let moveX = 0;
    function handleStart(e) {
        if (e.target.classList.contains("lgnd")) {
            e.target.classList.add("moving");
            movingCirc = true;
        }
    }
    function handleTouchEnd(e) {
        if (movingCirc) {
            handleEnd(moveX, e.target);
        }
    }
    function handleMouseEnd(e) {
        if (movingCirc) {
            handleEnd(e.pageX, e.target);
        }
    }
    function handleTouchCancel(e) {
        if (movingCirc) {
            handleEnd(moveX, e.target);
        }
    }
    function handleEnd(x, el) {
        if (el.classList.contains("lgnd")) {
            el.classList.remove("moving");
        }
        movingCirc = false;
        if (x < document.querySelector(".slide:not(.hidden)").offsetWidth / 2) {
            document.querySelector(".slide:not(.hidden) .optBtn:nth-of-type(1)").click()
        } else {
            document.querySelector(".slide:not(.hidden) .optBtn:nth-of-type(2)").click()
        }
    }
    function handleMouseMove(e) {
        if (movingCirc) {
            handleMove(e.pageX);
        }
    }
    function handleTouchMove(e) {
        if (movingCirc) {
            moveX = e.touches[0].pageX;
            handleMove(moveX)
        }
    }
    function handleMove(x) {
        if (movingCirc) {
            const elSlide = document.querySelector(".slide:not(.hidden)");
            const el = elSlide.querySelector("legend");
            if (x < 10 || x > (elSlide.offsetWidth - 10)) {
                handleEnd(x, el)
            }
            el.style.left = x + "px";
        }

    }


    const allQs = [];
    const allAs = [];
    (function () {
        for (const answer in data.answers) {
            allAs.push(answer);
            for (const qs of data.answers[answer]) {
                allQs.push([qs, answer])
            }
        }
        setupQuiz();

        quiz.addEventListener('mousedown', handleStart);
        quiz.addEventListener('mouseup', handleMouseEnd);
        quiz.addEventListener('mousemove', handleMouseMove);
        quiz.addEventListener('touchstart', handleStart);
        quiz.addEventListener('touchend', handleTouchEnd);
        quiz.addEventListener('touchcancel', handleTouchCancel);
        quiz.addEventListener('touchmove', handleTouchMove);
    })();
</script>
