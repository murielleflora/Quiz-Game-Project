// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quiz.DAL;

#nullable disable

namespace quiz.Migrations
{
    [DbContext(typeof(QuizContext))]
    [Migration("20240126184056_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("quiz.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<bool>("CategoryIsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("category_is_active");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("quiz.Models.CategoryQuiz", b =>
                {
                    b.Property<int>("CategoryQuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_quiz_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.HasKey("CategoryQuizId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuizId");

                    b.ToTable("category_quiz");
                });

            modelBuilder.Entity("quiz.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("option_id");

                    b.Property<bool>("OptionIsCorrect")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("option_is_correct");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("option_text");

                    b.HasKey("OptionId");

                    b.ToTable("option");
                });

            modelBuilder.Entity("quiz.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<string>("QuestionFeedback")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_feedback");

                    b.Property<bool>("QuestionIsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("question_is_active");

                    b.Property<short>("QuestionLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("question_level");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.HasKey("QuestionId");

                    b.ToTable("question");
                });

            modelBuilder.Entity("quiz.Models.QuestionOption", b =>
                {
                    b.Property<int>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_option_id");

                    b.Property<int>("OptionId")
                        .HasColumnType("int")
                        .HasColumnName("option_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("question_option");
                });

            modelBuilder.Entity("quiz.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<bool>("QuizIsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("quiz_is_active");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("quiz_name");

                    b.HasKey("QuizId");

                    b.ToTable("quiz");
                });

            modelBuilder.Entity("quiz.Models.QuizIssue", b =>
                {
                    b.Property<int>("QuizIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_issue_id");

                    b.Property<DateTime>("QuizIssueDateReported")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("quiz_issue_date_reported");

                    b.Property<string>("QuizIssueDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quiz_issue_description");

                    b.Property<bool>("QuizIssueIsFixed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("quiz_issue_is_fixed");

                    b.HasKey("QuizIssueId");

                    b.ToTable("quiz_issue");
                });

            modelBuilder.Entity("quiz.Models.QuizQuestion", b =>
                {
                    b.Property<int>("QuizQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_question_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.HasKey("QuizQuestionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("quiz.Models.QuizSession", b =>
                {
                    b.Property<int>("QuizSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_session_id");

                    b.Property<int>("QuizSessionScore")
                        .HasColumnType("int")
                        .HasColumnName("quiz_session_score");

                    b.Property<DateTime>("QuizSessionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("quiz_session_time");

                    b.HasKey("QuizSessionId");

                    b.ToTable("quiz_session");
                });

            modelBuilder.Entity("quiz.Models.QuizTracker", b =>
                {
                    b.Property<int>("QuizTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_tracker_id");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<int>("QuizSessionId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_session_id");

                    b.Property<int>("UserQuizId")
                        .HasColumnType("int")
                        .HasColumnName("user_quiz_id");

                    b.HasKey("QuizTrackerId");

                    b.HasIndex("QuizId");

                    b.HasIndex("QuizSessionId");

                    b.HasIndex("UserQuizId");

                    b.ToTable("quiz_tracker");
                });

            modelBuilder.Entity("quiz.Models.UserIssue", b =>
                {
                    b.Property<int>("UserIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_issue_id");

                    b.Property<int>("QuizIssueId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_issue_id");

                    b.Property<int?>("UserQuizId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("user_quiz_id");

                    b.HasKey("UserIssueId");

                    b.HasIndex("QuizIssueId");

                    b.HasIndex("UserQuizId");

                    b.ToTable("user_issue");
                });

            modelBuilder.Entity("quiz.Models.UserQuiz", b =>
                {
                    b.Property<int>("UserQuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_quiz_id");

                    b.Property<string>("UserQuizEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_quiz_email");

                    b.Property<bool>("UserQuizIsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("user_quiz_is_active");

                    b.Property<bool>("UserQuizIsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("user_quiz_is_admin");

                    b.Property<string>("UserQuizPassword")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("user_quiz_password");

                    b.Property<string>("UserQuizUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_quiz_username");

                    b.HasKey("UserQuizId");

                    b.ToTable("user_quiz");
                });

            modelBuilder.Entity("quiz.Models.CategoryQuiz", b =>
                {
                    b.HasOne("quiz.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("quiz.Models.QuestionOption", b =>
                {
                    b.HasOne("quiz.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("quiz.Models.QuizQuestion", b =>
                {
                    b.HasOne("quiz.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("quiz.Models.QuizTracker", b =>
                {
                    b.HasOne("quiz.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz.Models.QuizSession", "QuizSession")
                        .WithMany()
                        .HasForeignKey("QuizSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz.Models.UserQuiz", "UserQuiz")
                        .WithMany()
                        .HasForeignKey("UserQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("QuizSession");

                    b.Navigation("UserQuiz");
                });

            modelBuilder.Entity("quiz.Models.UserIssue", b =>
                {
                    b.HasOne("quiz.Models.QuizIssue", "QuizIssue")
                        .WithMany()
                        .HasForeignKey("QuizIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz.Models.UserQuiz", "UserQuiz")
                        .WithMany()
                        .HasForeignKey("UserQuizId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("QuizIssue");

                    b.Navigation("UserQuiz");
                });
#pragma warning restore 612, 618
        }
    }
}
